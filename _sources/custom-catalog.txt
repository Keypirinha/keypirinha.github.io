======================
Customize your Catalog
======================

By default, almost all |project|'s features are enabled. While the vast majority
of users will find this convenient not to have to configure |project| straight
out of the box, some might prefer to have full control on what is actually
available in |project|'s :term:`catalog` and consequently in search results.

This small guide shows how to clear the Catalog entirely so you can then
expand it with only the desired features/items.


Introduction
============

To understand how to customize your Catalog, you must first understand how it is
built. The tiny :ref:`architecture-overview` section gives you an overview of
the role plugins play in |project|.

This guide assumes you already know how to configure |project| so you might want
to open the :doc:`configuration` chapter aside and have it handy while reading
the following sections.


Disable everything
==================

To start with a clean slate, we will disable every shipped :term:`package`
except the ``Internal`` one.

Open |project|'s configuration file and create/modify the ``ignored_packages``
setting as follows:

.. code-block:: ini

    [app]
    ignored_packages = <All>, -Internal

Read the comments related to ``ignored_packages`` in the default configuration
file for more info on the meaning and the syntax of this value.

Save your configuration file.

From now on, only items from the ``Internal`` package are available. The
``Internal`` package enables access to some core features of |project| and is
very lightweight in terms of number of items. So it is advised to keep it
enabled but technically-wise, nothing prevents you from disabling it as well
(``ignored_packages = <All>``).


Expanding your Catalog
======================

|project| is a generic tool that allows a very wide range of use cases.

For that reason, this section cannot be explicit or exhaustive since it entirely
depends on how you want to use |project|. For example, some users only want to
launch applications while other may want to have full access to every bookmarks
referenced in their favorite web browser...

One important thing to keep in mind though is that, in |project|, each package
roughly represent a single feature or a set of related features. For example,
the `Calc` package does just what its name implies: it evaluates a mathematical
expression you typed, then shows its result.

Check out the list of the available :doc:`shipped-packages` and learn more about
their individual purpose to see if they suit your needs. You may then want to
enable them one by one using the ``ignored_packages`` setting.

Also, do not forget that some of them are configurable, which means that you may
be able to have a more fine-grained control on what they may reference in the
Catalog. For example, if you enable the ``Apps`` package, you might want to have
a look at the ``scan_start_menu`` and ``scan_env_path`` settings.


Tracking down unwanted features
===============================

If you happen to notice that some unwanted features are still enabled, it is
worth mentioning that it is possible to know what plugin (and by extension, what
package) created a specific catalog item in the list of results.

To do that, select an item and press :kbd:`Alt+Enter`. The :term:`Console`
window will show up and the last log lines list the properties of the selected
item. Among them the name of the parent plugin.
