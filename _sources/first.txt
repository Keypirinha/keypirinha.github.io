===========
First steps
===========

The first thing to know about |project| is that you can use almost every of its
features by using your keyboard only. Keep that in mind!


Start |project|
===============

By default, |project| does not require any special configuration before being
launched for the first time. It is a *resident* application, which means it
directly goes to the background when it is started. You can ensure |project| is
running by checking for its icon in the system tray's notification area. It is
normally located next to the system clock on your desktop, in the lower-right
corner of your main screen.

.. image:: images/systray.png
    :alt: |project|'s icon in the system's tray
    :align: center


Open the LaunchBox
==================

Once |project| is running, press :kbd:`Ctrl+Win+K` (by default) to display the
:term:`LaunchBox`...

.. image:: images/wndrun.png
    :alt: |project|'s main dialog
    :align: center


First Search
============

You can now search for the task you wish to execute. Say you want to launch an
application, *Firefox* for example. Start typing its name and it will soon show
up in the results list as long as *Firefox* is installed on your machine.

.. image:: images/wndrun-search1.png
    :alt: First search
    :align: center

Once the desired item is selected (you can use the :kbd:`Down`, :kbd:`Up`,
:kbd:`PgDown` and :kbd:`PgUp` keys for that), press :kbd:`Enter` to launch it.
|project| will then automatically go back to background...

.. note::
    Search is case-insensitive in |project|, thus the ``FFOX`` search term is
    equivalent to ``ffox`` and ``FfoX``.


Second Search
=============

|project| remembers the tasks you execute, so if you want to launch an already
executed task, chances are high that you will only need to type the very first
couple of letters of its name to get the task at the top of the results list.

To keep going with our example, we will **just** type the ``F`` letter since it
is the one that naturally comes to our mind when thinking about the name
``Firefox``.

Notice how the score of the *Firefox* item is much higher now.

To keep going with our example, execute this item **again**. You will see why in
the next section below.

.. image:: images/wndrun-search2.png
    :alt: Second search for an already executed item
    :align: center

.. note::
    The score numbers you observe on your machine might differ from the ones
    displayed on that screenshot.


.. _first-associate-keyword:

Associate a Keyword to an Item
==============================

This is one of the coolest search feature of |project|.

Still with our example, if you happen to launch your *Firefox* browser a lot,
you will realize that you will often, if not always, type the same search term
over and over to find its item in the catalog.

|project| offers the ability to **implicitely associate a keyword with a
particular item**.

In the last section, we typed the search term ``F`` (or ``f``, search is
case-insensitive), before **executing** *Firefox*. |project| recorded that
information so every time your search term will be ``f``, the *Firefox* will be
pushed up to the top of the results list.

.. note::
    You may want to *associate* ``f`` with an other item later. In that case,
    just type ``f`` and select this other item before **executing** it.
    |project| will change the association implicitely.


Specify arguments
=================

In |project|, some items accept arguments. They even sometimes require some.

One you typed your search term and **selected** the desired item, hit the
:kbd:`Tab` key (the :kbd:`Space` key also works in this case).

To keep going with our example, *Firefox* currently accepts the ``-preferences``
command line option so let's try typing this one and execute our item.

.. image:: images/wndrun-args.png
    :align: center


Actions
=======

Items may have several actions associated to them, or their type.

Search and select the *Firefox* item again.

.. image:: images/wndrun-actions-available.png
    :align: center

At the bottom of the LaunchBox, |project| indicates that ``8 actions`` are
available for this item. Hit the :kbd:`Ctrl+Enter` to visualize these actions
(or the :kbd:`Tab` key until you reach the actions list).

Because this particular *Firefox* item is a file, even a :file:`*.lnk` file in
our example, the following actions are made available:

.. image:: images/wndrun-actions.png
    :align: center

Select the one you want and press :kbd:`Enter` to execute.


.. _first-maximize:

Maximize the LaunchBox
======================

:kbd:`Alt+X` (or :kbd:`Win+Up`) **toggles** between *normal* and *maximized*
state.

You may need to **temporarily extend the size** of the LaunchBox sometimes in
order to see the full value of some results in the list. While it is possible to
do it using the conventional Windows way by dragging the right-bottom corner of
the window with the mouse, |project| offers a more convenient and instantaneous
way of maximizing the window by pressing :kbd:`Alt+X` or :kbd:`Win+Up`.

.. note::
    This feature does not impact the geometry you manually setup in case your
    ``geometry`` setting is ``persistent``. Hit :kbd:`Alt+X` again and your
    previous position and size will be restored. **CAUTION:** If you are in
    ``persistent`` geometry, do not reposition/resize the window **while being
    in maximized mode** or you will loose your previous geometry.

Leave a Search
==============

May you wish to abort what you were doing on the :term:`LaunchBox`, press the
:kbd:`Esc` key. Press it **once**, to clear your search, **twice** to close the
dialog. Note that one time is enough if you didn't type anything.

.. tip::
    The :kbd:`Alt+F4` standard Windows shortcut closes the dialog as expected.


Configuration
=============

See the :doc:`configuration` section for more info.


Extending |project|
===================

Despite its apparent simplicity, |project| is a generic tool that is able to
welcome a very wide range of features not offered yet by the official bundled
plugins. An API allows to extend |project|'s features to make them fit your
needs.

See the :doc:`api` section for more info.
